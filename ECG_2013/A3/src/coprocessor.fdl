// Cmd:
//    0: idle
//    1: run
//    2: reset
dp MWI( in cmd      : ns(28);
    in in_newValue  : ns(16); 
    in in_oldValue  : ns(16);
    out o_value   : ns(32)) {

  reg accu : ns(32);
  sig sum : ns(32);

  always {
    //$display($dec, "[", $cycle, "] MWI - cmd: ", cmd, ", newVal: ", in_newValue, ", oldVal: ", in_oldValue, ", sum: ", sum, ", o_value: ", o_value);

    accu = sum = (cmd == 1) ? 
              // Run
              accu + in_newValue - in_oldValue 
          :(cmd == 2) ?
              // reset accumulator
              0:
          // idle. Maintain accu value
          accu;

    // Return 0 on reset and idle. Else MWI value
    o_value = (cmd == 1) ? (sum * 4369) >> 17 : 0;
  }
}




dp Coprocessor(
      in datain     : ns(32);
      in cmd        : ns(32);
      in datainrdy  : ns(1);
      out dataout   : ns(32);
      out dataoutrdy: ns(1);
      in stall      : ns(1)){ // true if the slave is currently busy (with handshaking) and cannot receive new data.
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);

   sig mwiCmd : ns(2);
   sig newVal : ns(16);
   sig oldVal : ns(16);
   sig mwiOut : ns(32);

   
   use MWI(mwiCmd, newVal, oldVal, mwiOut);

   $trace(newVal, "traces/CP_newVal.seq");
   $trace(oldVal, "traces/CP_oldVal.seq");
   $trace(mwiOut, "traces/CP_mwiOut.seq");
   $trace(mwiCmd, "traces/CP_mwiCmd.seq");
   $trace(datainrdy, "traces/CP_datainrdy.seq");
   $trace(datain, "traces/CP_datain.seq");
   $trace(dataout, "traces/CP_dataout.seq");
   $trace(stall, "traces/CP_stall.seq");
   
   always{

      //$display("");
      //$display("");
      //$display($dec, "COP: datain: ", datain, ", cmd: ", cmd, ", datainrdy: ", datainrdy);
      //$display($dec, "COP: newVal: ", newVal, ", oldVal: ", oldVal, ", mwiCmd: ", mwiCmd, ", dataout: ", dataout, ", dataoutr: ", dataoutr);
      //$display($dec, "COP: dataout: ", dataout, ", dataoutrdy: ", dataoutrdy, ", stall: ", stall);
      //$display($bin, "cmd: ", cmd);

      newVal = datain[31:16];
      oldVal = datain[15:0];
      mwiCmd = cmd[1:0];

      stallr = stall;
      dataout = dataoutr;
    }

   sfg captureData{
      //$display("CaptureData. datainrdyr: ", datainrdyr, ", stallr: ", stallr, ", cmd: ", cmd);
      dataoutrdy = 0; 
      datainrdyr = datainrdy;
      datainr = datain;
      cmdr = cmd;
      dataoutr = (mwiOut) ? mwiOut : dataoutr;
   }
   
   sfg awaithandshake{
      //$display("awaithandshake");
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
      //$display("resetAndSignalRdy. dataoutr: ", dataoutr);
      dataoutrdy = 1;
      datainrdyr = 0;
   }
   
   sfg nothing{
      //$display("nothing");
      dataoutrdy = 0; 
   }
   
}

fsm Cop_cntrl(Coprocessor){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
       
}





dp testco(	out out_data 	: ns(32); 
			out out_cmd 	: ns(32); 
			out out_datardy : ns(1); 
			in in_data 		: ns(32);
			in in_datardy 	: ns(1)) {
	always{
		$display($dec, $cycle, ": in_data: ", in_data, ", out_datardy: ", out_datardy);
	}
	sfg test1 { 
		out_data = (ns(16))    2 # (ns(16)) 3;
		out_cmd = 2;
		out_datardy = 1;
	}
	sfg test2 { 
		out_data = (ns(16))   53 # (ns(16)) 0;
		out_cmd = 1;
		out_datardy = 1;
	}
	sfg test3 { 
		out_data = (ns(16)) 2145 # (ns(16)) 0;
		out_cmd = 0;
		out_datardy = 1;
	}
	sfg test4 { 
		out_data = (ns(16)) 4242 # (ns(16)) 0;
		out_cmd = 1;
		out_datardy = 1;
	}
}


fsm fsm_teshbench(testco) {
	initial s0;
	state s1, s2, s3;
	@s0 test1 -> s1;
	@s1 test2 -> s2;
	@s2 test3 -> s3;
	@s3 test4 -> s0;

}


system cop {
	Coprocessor(s_dataout, s_cmdout, s_dataoutrdy, s_datain, s_datainrdy);
	testco(s_dataout, s_cmdout, s_dataoutrdy, s_datain, s_datainrdy);
}
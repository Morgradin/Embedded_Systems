$option "vcd"
//$option "profile_toggle_alledge"
//$option "profile_toggle_upedge" 
//$option "profile_display_operations"
//$option "profile_display_cycles"


////////////////////////////
// CPU
////////////////////////////

ipblock instMem(in address : ns(5);
                in wr      : ns(1);
                in rd      : ns(1);  
                in idata   : ns(32);
                out odata  : ns(32)) {

   iptype "ram";
   ipparm "wl=32"; 
   ipparm "size=64";
   ipparm "file=program.txt";  
 }
 


dp PC(in pc_in : ns(18); out pc_out : ns(5); in ctrljump : ns(1); in alujump : ns(1); in dojump : ns(1); in stall: ns(1)) {

  reg current : ns(5);
  sig tmp : ns(5);

  always {
    //$display("");
    //$display("");
    //$display($dec, "[", $cycle, "]PC -> ctrljump: ", ctrljump, ", alujump: ", alujump, ", dojump: ", dojump, ", pc_out: ", pc_out, ", pc_in: ", pc_in);


    tmp = (alujump == 0 & dojump == 0 & ctrljump) ? pc_in : 
              (alujump & dojump & ctrljump) ? pc_in : 
                  stall ? current : current + 1;

    pc_out =  current = tmp;
  }
}



dp instructionMemory(in address : ns(5);
                     out ctrl   : ns(14);
                     out instVal: ns(18)) { 

    reg adr : ns(5);
    reg iv : ns(18); 

    sig instData: ns(32);

   
    use instMem(address, 0, 1, 0, instData);


    always{
        //$display($bin, "[", $cycle, "]instructionMemory - instData: ", instData, ", instVal: ", instVal);
        //$display($bin, "ctrl: ", ctrl, ", instVal: ", instVal, ", address: ", address);

        ctrl = instData[31:18];
        iv = instData[17:0];
        instVal = iv;

        adr = address;
    }
}




dp controller(in ctrl_i       : ns(14);
              in wait         : ns(1);
              out asel        : ns(3);
              out bsel        : ns(3);
              out storesel    : ns(3);
              out storeenable : ns(1);
              out alustate    : ns(3);
              out s_mux1      : ns(1);
              out s_mux2      : ns(1);
              out s_mux3      : ns(1);
              out ctrljump    : ns(1);
              out regPrint    : ns(1);
              out stall_0     : ns(1);
              out bus_cmd     : ns(32)) {

    reg ctrl : ns(14);
    sig stall : ns(1);

    

    $trace(stall, "traces/stall.seq");
    
    always{
        ctrl = (stall | wait) ? 0 : ctrl_i;
        stall_0 = (stall | wait) ? 1 : 0;
    }


    sfg DISPLAY {
        //$display($bin, "[", $cycle, "]Controller - opcode: ", ctrl[13:9], ", ctrl: ", ctrl, ", ctrljump: ", ctrljump);
        //$display("wait: ", wait);
    }

    sfg SCMD{
        //$display("SCMD");
        asel = ctrl[5:3];     
        bsel = ctrl[2:0];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 5;         
        s_mux1 = 1;
        s_mux2 = 0;
        s_mux3 = 1;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = (ns(4)) 4 # (ns(28)) ctrl[13:9]; // targetID = 4 for MWI, cmd = either 1 or 2
        //$display($bin, "bus_cmd: ", bus_cmd, ", asel: ", asel, ", bsel: ", bsel, ", storesel: ", storesel);
    }
    sfg LOAD{
        //$display("LOAD");
        asel = ctrl[5:3];     
        bsel = 0;
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 4;         // Not used in this state
        s_mux1 = 1;
        s_mux2 = 0;
        s_mux3 = 1;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0x20000000;
    }
    sfg STRE{
        //$display("STORE");
        asel = 0;             // Not used in this state
        bsel = ctrl[8:6];
        storesel = 0;
        storeenable = 0;
        alustate = 0;         // Not used in this state
        s_mux1 = 0;
        s_mux2 = 0;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 1;
        stall = 0;
        bus_cmd = 0;
    }
    sfg MOVE{
        //$display("MOVE");
        asel = 0;             // Not used in this state
        bsel = ctrl[5:3];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 0;         // Not used in this state
        s_mux1 = 1;
        s_mux2 = 0;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }


    sfg ADDI{
        //$display("ADDI");
        asel = 0;             // Not used in this state
        bsel = ctrl[5:3];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 0;
        s_mux1 = 0;
        s_mux2 = 1;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }
    sfg SUBI{
        //$display("SUBI");
        asel = 0;             // Not used in this state
        bsel = ctrl[5:3];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 1;
        s_mux1 = 0;
        s_mux2 = 1;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }
    sfg MULI{
        //$display("MULI");
        asel = 0;             // Not used in this state
        bsel = ctrl[5:3];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 2;
        s_mux1 = 0;
        s_mux2 = 1;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }
    sfg SHRI{
        //$display("SHRI");
        asel = 0;             // Not used in this state
        bsel = ctrl[5:3];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 3;
        s_mux1 = 0;
        s_mux2 = 1;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }


    sfg BRCH{
        //$display("BRCH");
        asel = 0;             // Not used in this state
        bsel = 0;
        storesel = 0;
        storeenable = 0;
        alustate = 4;
        s_mux1 = 0;
        s_mux2 = 0;
        s_mux3 = 0;
        ctrljump = 1;
        regPrint = 0;
        stall = 1;
        bus_cmd = 0;
    }
    sfg BILT{
        //$display("BILT");
        asel = ctrl[8:6];
        bsel = ctrl[5:3];
        storesel = 0;
        storeenable = 0;
        alustate = 4;
        s_mux1 = 1;
        s_mux2 = 0;
        s_mux3 = 0;
        ctrljump = 1;
        regPrint = 0;
        stall = 1;
        bus_cmd = 0;
    }


    sfg ADD{
        //$display("ADD");
        asel = ctrl[5:3];
        bsel = ctrl[2:0];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 0;
        s_mux1 = 1;
        s_mux2 = 1;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }
    sfg SUB{
        //$display("SUB");
        asel = ctrl[2:0];
        bsel = ctrl[5:3];
        storesel = ctrl[8:6];
        storeenable = 1;
        alustate = 1;
        s_mux1 = 1;
        s_mux2 = 1;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }

    sfg NOP {
        //$display("NOP");
        asel = 0;
        bsel = 0;
        storesel = 0;
        storeenable = 0;
        alustate = 0;
        s_mux1 = 0;
        s_mux2 = 0;
        s_mux3 = 0;
        ctrljump = 0;
        regPrint = 0;
        stall = 0;
        bus_cmd = 0;
        
    }
}





fsm fsm_controller(controller) {
    initial run;
    @run if       (ctrl[13:9] == 0b00001) then (LOAD, DISPLAY) -> run;
         else if  (ctrl[13:9] == 0b00010) then (STRE, DISPLAY) -> run;
         else if  (ctrl[13:9] == 0b00011) then (MOVE, DISPLAY) -> run;

         else if  (ctrl[13:9] == 0b01000) then (ADDI, DISPLAY) -> run;
         else if  (ctrl[13:9] == 0b01001) then (SUBI, DISPLAY) -> run;
         else if  (ctrl[13:9] == 0b01010) then (MULI, DISPLAY) -> run;
         else if  (ctrl[13:9] == 0b01011) then (SHRI, DISPLAY) -> run;

         else if  (ctrl[13:9] == 0b00100) then (BRCH, DISPLAY) -> run;
         else if  (ctrl[13:9] == 0b00101) then (BILT, DISPLAY) -> run;

         else if  (ctrl[13:9] == 0b01100) then (ADD, DISPLAY) -> run;
         else if  (ctrl[13:9] == 0b01101) then (SUB, DISPLAY) -> run;

         else if  (ctrl[13:11] == 0b100) then (SCMD, DISPLAY) -> run;

         else (NOP) -> run;
}



 





dp register(in asel     : ns(3);
            in bsel     : ns(3);
            in printB   : ns(1);
            in storesel   : ns(3); 
            in storeenable  : ns(1); 
            in storedata  : tc(32); 
            out a       : tc(32);
            out b       : tc(32)) {
  
  reg r1, r2, r3, r4, r5, r6, r7: tc(32);
  sig sampleNumber : ns(32); // This is a hack. Hardcoded for using R4 as address
  

  sfg run {
    //$display($dec, "[", $cycle, "]Register - Store Sel: ", storesel, ", StoreData: ", storedata, ", a: ", asel, "=", a, " b: ", bsel, "=", b);
    a = ( asel == 0b000 ) ? 0b000: 
      ( asel == 0b001 ) ? r1:
      ( asel == 0b010 ) ? r2:
      ( asel == 0b011 ) ? r3:
      ( asel == 0b100 ) ? r4:
      ( asel == 0b101 ) ? r5:
      ( asel == 0b110 ) ? r6:
      r7;

    b = ( bsel == 0b000 ) ? 0b000: 
      ( bsel == 0b001 ) ? r1:
      ( bsel == 0b010 ) ? r2:
      ( bsel == 0b011 ) ? r3:
      ( bsel == 0b100 ) ? r4:
      ( bsel == 0b101 ) ? r5:
      ( bsel == 0b110 ) ? r6:
      r7;


    // Handling datastoring
    r1 = ( storesel == 1) ? (storeenable ? storedata: r1) : r1;
    r2 = ( storesel == 2) ? (storeenable ? storedata: r2) : r2;
    r3 = ( storesel == 3) ? (storeenable ? storedata: r3) : r3;
    r4 = ( storesel == 4) ? (storeenable ? storedata: r4) : r4;
    r5 = ( storesel == 5) ? (storeenable ? storedata: r5) : r5;
    r6 = ( storesel == 6) ? (storeenable ? storedata: r6) : r6;
    r7 = ( storesel == 7) ? (storeenable ? storedata: r7) : r7;

    //$display($dec, "R1: ", r1, ", R2: ", r2, ", R3: ", r3, ", R4: ", r4, ", R5: ", r5);

  }

  sfg print{
      // Implemented for printing register values using STRE.
      // It's a stupid hack
      sampleNumber = r4;
      $display($dec, "[", $cycle, "] Sample(", sampleNumber, ") output: ", b);
  }
}



fsm fsm_print(register){
  initial run;
  @run if (printB) then (print, run) -> run;
       else (run) -> run;

}




dp ALU( in A       : tc(32); 
        in B       : tc(32); 
        in cstate  : ns(3); 
        out C      : tc(32);
        out alujump: ns(1);
        out dojump : ns(1) ) {

  always{
      alujump = (A > B);
      dojump = (cstate == 4) ? 1 : 0;

      C = ( cstate == 0 ) ? A+B: 
          ( cstate == 1 ) ? B-A:
          ( cstate == 2 ) ? A*B:
          ( cstate == 3 ) ? B>>A:
          ( cstate == 4 ) ? A:
          ( cstate == 5 ) ? (ns(16)) A # (ns(16)) B:
          0;

      //$display($bin, "[", $cycle, "]ALU - A: ", A, ", B: ", B, ", C: ", C, ", jump: ", alujump, ", dojump: ", dojump, ", cstate: ", cstate);
      //$display($bin, "[", $cycle, "]ALU - A: ", A, ", B: ", B, ", C: ", C);
  }
}






dp mux1(in i0      : tc(32); 
        in i1      : tc(32); 
        in select  : ns(1); 
        out o      : tc(32)) {

    always {
        o = select ? i1: i0;
        //$display($dec, "[", $cycle, "]MUX - i0: ", i0, ", i1: ", i1, ", o: ", o, ", select: ", select);
    }
}

dp mux2 : mux1
dp mux3 : mux1





dp CPU (out M_datain    : ns(32);
        out M_cmd       : ns(32);
        out M_datainrdy : ns(1);
        in M_dataout    : ns(32);
        in M_dataoutrdy : ns(1)) {

   reg waitCPU  : ns(1);
   reg cmd      : ns(32);
   reg r_datain : ns(32);

   reg save_storeenable : ns(1);
   reg save_storesel    : ns(3);
   reg save_s_mux3      : ns(1);
   sig storeenable_out  : ns(1);
   sig storesel_out     : ns(3);
   sig s_mux3_out       : ns(1);

   sig adr   : ns(5);
   sig ctrl  : ns(14);

   // register
   sig asel       : ns(3);
   sig bsel       : ns(3);
   sig storesel   : ns(3); 
   sig storeenable: ns(1); 
   sig storedata  : tc(32); 
   sig rega       : tc(32);
   sig regb       : tc(32);
   sig a          : tc(32);
   sig regData    : tc(32);
   sig mbalu      : tc(32);
   sig ctrljump   : ns(1);

   sig instVal    : tc(18);

   // ALU
   sig alustate   : ns(3);
   sig alujump    : ns(1);
   sig dojump     : ns(1);

   // mux
   sig s_mux1   : ns(1);
   sig s_mux2   : ns(1);
   sig s_mux3   : ns(1);

   sig printB   : ns(1);

   sig PC_stall: ns(1);
   sig bus_cmd : ns(32);
   sig wait : ns(1);


   //       in      out   in      in
   use PC(instVal, adr, ctrljump, alujump, dojump, PC_stall);

   //                     in  out   out
   use instructionMemory(adr, ctrl, instVal);

   //             in,   in    out   out   out       out          out       out     out     out     out      out      out       out 
   use controller(ctrl, wait, asel, bsel, storesel, storeenable, alustate, s_mux1, s_mux2, s_mux3, ctrljump, printB, PC_stall, bus_cmd);

   //      in  in   in        out         out
   use ALU(a, regb, alustate, storedata, alujump, dojump);
   use register(asel, bsel, printB, storesel_out, storeenable_out, regData, rega, regb);

   //       in        in    in     out
   use mux1(instVal, rega, s_mux1, a);
   use mux2(regb, storedata, s_mux2, mbalu);
   use mux3(mbalu, M_dataout, s_mux3_out, regData);


   always{
          // Maintining control value while waiting for return
          storeenable_out = (wait & waitCPU) ? 0 : (wait == 0 & waitCPU) ? save_storeenable : storeenable;
          save_storeenable = (bus_cmd) ? storeenable : save_storeenable;

          storesel_out = (wait & waitCPU) ? 0 : (wait == 0 & waitCPU) ? save_storesel : storesel;
          save_storesel = (bus_cmd) ? storesel : save_storesel;
          s_mux3_out = (wait & waitCPU) ? 0 : (wait == 0 & waitCPU) ? save_s_mux3 : s_mux3;
          save_s_mux3 = (bus_cmd) ? s_mux3 : save_s_mux3;



          M_datain = r_datain = (bus_cmd) ? storedata : (M_dataoutrdy) ? 0 : r_datain; 
          M_cmd = cmd = (bus_cmd) ? bus_cmd : (M_dataoutrdy) ? 0 : cmd; 
          M_datainrdy = (bus_cmd) ? 1 : 0;  
          wait = waitCPU = (bus_cmd) ? 1 : (M_dataoutrdy) ? 0 : waitCPU;

          //$display($bin, "wait: ", wait);
          //$display($bin, "Bus_cmd: ", bus_cmd);
          //$display($bin, "M_datain: ", M_datain);
          //$display($bin, "storedata: ", storedata);
          //$display($bin, "M_datainrdy: ", M_datainrdy);
          //$display("[", $cycle, "] M_datain: ", M_datain, ", M_cmd: ", M_cmd, ", M_datainrdy: ", M_datainrdy, ", waitCPU: ", waitCPU, ", wait: ", wait);
          //$display("[", $cycle, "] M_dataout: ", M_dataout, ", M_dataoutrdy: ", M_dataoutrdy);
          //$display($dec, "[", $cycle, "] MUX3: ", regData, ", storesel_out: ", storesel_out, ", storeenable_out: ", storeenable_out);
          //$display("[", $cycle, "] save_s_mux3: ", save_s_mux3, ", save_storeenable: ", save_storeenable, ", save_storesel: ", save_storesel);
   }  

   
 }

////////////////////////////
// Bus
////////////////////////////

dp bus(
        // CPU interface
        in reqCPU  : ns(1);
        in cmdCPU : ns(32); // What command should be executed at the unit receiving this + ID of destination unit is in 4 MSB
        in dataoutCPU : ns(32); // data from the CPU
        out ackCPU : ns(1); 
                
        out dataRdyCPU : ns(1); // high when unit has data, which is ready for the CPU
        out datainCPU : ns(32); // data to the CPU
        in waitCPU : ns(1); // Remains high until the CPU has read the data
                
        // Data Memory interface
        out reqDataMem : ns(1);
        out cmdDataMem : ns(32);
        out datainDataMem : ns(32); // data to Data memory from CPU
        in ackDataMem : ns(1);
               
        in dataRdyDataMem : ns(1); 
        in dataoutDataMem : ns(32); // data from Data memory to CPU
        out waitDataMem : ns(1);

        // coprocessor interface
        out reqCop : ns(1);
        out cmdCop : ns(32);
        out datainCop : ns(32); // data to Data memory from CPU
        in ackCop : ns(1);
               
        in dataRdyCop : ns(1); 
        in dataoutCop : ns(32); // data from Data memory to CPU
        out waitCop : ns(1);
        
        // Sensor interface
        out reqSensor : ns(1);
        out cmdSensor : ns(32); // only cmd is needed to the sensor
        out NotUsed1 : ns(32); // dataport not used
        in ackSensor : ns(1);
        
        in dataRdySensor : ns(1);
        in dataoutSensor : ns(32);
        out waitSensor : ns(1);
        
        // Output interface
        out reqOutput : ns(1);
        out cmdOutput : ns(32);
        out datainOutput : ns(32); // data to output from CPU
        in ackOutput : ns(1);
               
        in dataRdyOutput : ns(1); 
        in dataoutOutput : ns(32); // data from output to CPU
        out waitOutput : ns(1);
        
        // IDs
        in ID_Sensor : ns(4);
        in ID_DataMem : ns(4);
        in ID_Output : ns(4);
        in ID_Cop : ns(4)
		
        ){
        
        $trace(reqDataMem, "traces/reqDataMem.seq");
        $trace(cmdDataMem, "traces/cmdDataMem.seq");
        $trace(datainDataMem, "traces/datainDataMem.seq");
        $trace(ackDataMem, "traces/ackDataMem.seq");
        $trace(dataRdyDataMem, "traces/dataRdyDataMem.seq");
        $trace(dataoutDataMem, "traces/dataoutDataMem.seq");
        $trace(waitDataMem, "traces/waitDataMem.seq");
        
        $trace(reqSensor, "traces/reqSensor.seq");
        $trace(cmdSensor, "traces/cmdSensor.seq");
        $trace(ackSensor, "traces/ackSensor.seq");
        $trace(dataRdySensor, "traces/dataRdySensor.seq");
        $trace(dataoutSensor, "traces/dataoutSensor.seq");
        $trace(waitSensor, "traces/waitSensor.seq");
        
        $trace(reqOutput, "traces/reqOutput.seq");
        $trace(cmdOutput, "traces/cmdOutput.seq");
        $trace(datainOutput, "traces/datainOutput.seq");
        $trace(ackOutput, "traces/ackOutput.seq");
        $trace(dataRdyOutput, "traces/dataRdyOutput.seq");
        $trace(dataoutOutput, "traces/dataoutOutput.seq");
        $trace(waitOutput, "traces/waitOutput.seq");
        
        $trace(reqCPU, "traces/reqCPU.seq");
        $trace(cmdCPU, "traces/cmdCPU.seq");
        $trace(dataoutCPU, "traces/dataoutCPU.seq");
        $trace(ackCPU, "traces/ackCPU.seq");
        $trace(dataRdyCPU, "traces/dataRdyCPU.seq");
        $trace(datainCPU, "traces/datainCPU.seq");
        $trace(waitCPU, "traces/waitCPU.seq");
        
        always{
          ackCPU = (cmdCPU[28:31] == ID_DataMem & ackDataMem) | (cmdCPU[28:31] == ID_Sensor & ackSensor) | (cmdCPU[28:31] == ID_Output & ackOutput | (cmdCPU[28:31] == ID_Cop & ackCop)); // "OR" all slaves ack signals here
          dataRdyCPU = dataRdyDataMem | dataRdySensor | dataRdyOutput | dataRdyCop; // Only one slave can access the bus at any one time (only the slave which responds to the cmd)
          
          reqDataMem = reqCPU;
          cmdDataMem = (reqCPU) ? cmdCPU : 0;
          datainDataMem = (reqCPU) ? dataoutCPU : 0;

          reqCop = reqCPU;
          cmdCop = (reqCPU) ? cmdCPU : 0;
          datainCop = (reqCPU) ? dataoutCPU : 0;
          
          reqSensor = reqCPU;
          cmdSensor = (reqCPU) ? cmdCPU : 0;
          waitSensor = waitCPU;
          
          reqOutput = reqCPU;
          cmdOutput = (reqCPU) ? cmdCPU : 0;
          datainOutput = (reqCPU) ? dataoutCPU : 0;
          waitOutput = waitCPU;
                    
          datainCPU = (dataRdyDataMem) ? dataoutDataMem : 
                      (dataRdySensor) ? dataoutSensor : 
                      (dataRdyOutput) ? dataoutOutput :
                      (dataRdyCop) ? dataoutCop :
                      0; // arbitrate here when multiple slaves
          waitDataMem = waitCPU;
          waitCop = waitCPU;
          
          NotUsed1 = 0;
        }       
}

dp slavebusinterface(
          // Bus ports
          in bus_req : ns(1);
          in bus_cmd : ns(32);
          in bus_datain : ns(32);
          out bus_ack : ns(1);
          
          out bus_rdy : ns(1);
          out bus_dataout : ns(32);
          in bus_wait : ns(1);
          
          // Slave ports - data going in to the slave does not need a handshake. 
          in datain : ns(32); // data from main unit to interface
          in datainrdy : ns(1); // slave signals that data and cmd is rdy
          out dataout : ns(32); // data to slave
          out cmdout : ns(32); // cmd to slave
          out dataoutrdy : ns(1); // signal to slave telling that the data on dataout is rdy
          in targetID : ns(4); // specifies the ID used in the MSB of CMD, which is intended for this slave
          out stallSlave : ns(1) // true if the slaveinterface is currently busy and cannot receive data from the slave
          ){
          
          reg bus_reqr : ns(1);
          reg bus_waitr : ns(1);
          reg datainrdyr : ns(1);
          reg targetIDr : ns(4);
          reg bus_cmdr : ns(32);
          
          always{
             bus_reqr = bus_req;
             bus_waitr = bus_wait;
             datainrdyr = datainrdy;
             targetIDr = targetID;
             bus_cmdr = bus_cmd;
          }
          
          sfg externalData{
             bus_ack = 1;
             dataout = bus_datain;
             cmdout = bus_cmd;
             dataoutrdy = bus_cmd[28:31] == targetID; // is the cmd and data intended for this slave?
             
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 1;
          }
          
          sfg ackExternalData{
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 1;
          }
          
          sfg internalData{
             bus_dataout = datain;
             bus_rdy = 1;
             
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             stallSlave = 1;
          }
          
          sfg ackInternalData{
             bus_rdy = 0;
             bus_dataout = 0;
             
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             stallSlave = 1;
          }
          
          sfg nothing{
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 0;
          }
          
}

fsm slavebusinterface_cntrl(slavebusinterface){
   initial s0;
   state s1,s2,s3;
   
   // condition explanation: Only ack if the cmd is intended for this slave
   @s0 if (bus_reqr == 1 & bus_cmdr[28:31] == targetIDr) then (externalData) -> s1;
       else (nothing) -> s0;
   @s1 if (bus_reqr == 0) then (ackExternalData) ->s2;
       else (externalData) -> s1;
   @s2 if (datainrdyr == 1) then (internalData) -> s3;
       else (nothing) -> s2;
   @s3 if (bus_waitr == 1) then (ackInternalData) -> s0;
       else (internalData) -> s3;
   
}

dp slavebusinterface2 : slavebusinterface
dp slavebusinterface3 : slavebusinterface
dp slavebusinterface4 : slavebusinterface

dp masterbusinterface(
          // Bus ports
          out bus_req : ns(1); // master request the bus
          out bus_cmd : ns(32); // cmd to target unit
          out bus_dataout : ns(32); // data to target unit
          in bus_ack : ns(1); // ack from bus
                      
          in bus_rdy : ns(1); // rdy from bus
          in bus_datain : ns(32); // data targeted for the master
          out bus_wait : ns(1); // wait to bus
                    
          // Master ports - data going in to the master does not need a handshake. 
          in datain : ns(32); // data from main unit to interface
          in cmd : ns(32); // command from main unit to interface
          in datainrdy : ns(1); // master signals that data and cmd is rdy
          out dataout : ns(32); // data to master
          out dataoutrdy : ns(1) // signal to master telling that the data on dataout is rdy
          ){
          
//          $trace(bus_req, "traces/M_bus_req.seq");
//          $trace(bus_cmd, "traces/M_bus_cmd.seq");
//          $trace(bus_dataout, "traces/M_bus_dataout.seq");
//          $trace(bus_ack, "traces/M_bus_ack.seq");
//          $trace(bus_rdy, "traces/M_bus_rdy.seq");
//          $trace(bus_datain, "traces/M_bus_datain.seq");
//          $trace(bus_wait, "traces/M_bus_wait.seq");
          
//          $trace(datain, "traces/M_datain_int.seq");
//          $trace(cmd, "traces/M_cmd_int.seq");
//          $trace(datainrdy, "traces/M_datainrdy_int.seq");
//          $trace(dataout, "traces/M_dataout_int.seq");
//          $trace(dataoutrdy, "traces/M_dataoutrdy_int.seq");
          
          reg bus_ackr : ns(1);
          reg bus_rdyr : ns(1);
          reg datainrdyr : ns(1);
          reg cmdr : ns(32);
          reg datainr : ns(32);
                      
          always{
             bus_ackr = bus_ack;
             bus_rdyr = bus_rdy;
             datainrdyr = datainrdy;
             cmdr = cmd;
             datainr = datain;
          }
          
          sfg internalData{
             bus_req = 1;
             bus_cmd = cmd;
             bus_dataout = datain;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
          
          sfg ackInternalData{
             bus_req = 0;
             bus_cmd = cmdr;
             bus_dataout = datainr;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
          
          sfg externalData{
             bus_wait = 1;
             dataout = bus_datain;
             dataoutrdy = 1;
             
             bus_req = 0;
             bus_cmd = 0;
             bus_dataout = 0;
          }
          
          sfg ackExternalData{
              bus_wait = 0;
              dataout = 0;
              dataoutrdy = 0;
              
              bus_req = 0;
              bus_cmd = 0;
              bus_dataout = 0;
          }
                    
          sfg nothing{
             bus_req = 0;
             bus_cmd = cmdr;
             bus_dataout = datainr;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
}

fsm masterbusinterface_cntrl(masterbusinterface){
   initial s0;
   state s1,s2,s3,s4;
   
   @s0 if (datainrdyr == 1) then (internalData) -> s1;
       else (nothing) -> s0; // do nothing
   @s1 if (bus_ackr == 1) then (ackInternalData) -> s3; // go to s3 in order to make sure the bus will not initiate a new communication due to the fact that the CPU is stalled at this particular bus-using instruction
       else (internalData) -> s1; // do nothing
   @s3 if (bus_rdyr == 1) then (externalData) -> s2;
       else (nothing) -> s3;
   @s2 (ackExternalData) -> s4; 
   @s4 (nothing) -> s0; // Wait one more cycle to synchronize with PC
}

dp bus_toplevel(
               // Master interface
               in M_datain : ns(32);
               in M_cmd : ns(32);
               in M_datainrdy : ns(1);
               out M_dataout : ns(32);
               out M_dataoutrdy : ns(1);
               //out stall_cpu : ns(1);
               
               // Slave interface (datamemory)
               in DM_datain : ns(32);
               in DM_datainrdy : ns(1);
               out DM_dataout : ns(32);
               out DM_cmdout : ns(32);
               out DM_dataoutrdy : ns(1);
               out DM_stall : ns(1);

               // Slave interface (coprocessor)
               in CP_datain : ns(32);
               in CP_datainrdy : ns(1);
               out CP_dataout : ns(32);
               out CP_cmdout : ns(32);
               out CP_dataoutrdy : ns(1);
               out CP_stall : ns(1);
               
               // Slave interface (Sensor)
               in SS_datain : ns(32);
               in SS_datainrdy : ns(1);
               out SS_dataout : ns(32); // data port not used in sensor
               out SS_cmdout : ns(32);
               out SS_dataoutrdy : ns(1);
               out SS_stall : ns(1);
               
               // Slave interface (output)
               in OP_datain : ns(32);
               in OP_datainrdy : ns(1);
               out OP_dataout : ns(32); // data port not used in sensor
               out OP_cmdout : ns(32);
               out OP_dataoutrdy : ns(1);
               out OP_stall : ns(1)
           ){
           
           sig reqCPU,reqDataMem,reqCop,reqSensor,reqOutput,ackCPU,ackDataMem,ackCop,ackSensor,ackOutput,dataRdyCPU,dataRdyDataMem,dataRdyCop,dataRdySensor,dataRdyOutput,waitCPU,waitDataMem,waitCop,waitSensor,waitOutput: ns(1);
           sig cmdCPU,cmdDataMem,cmdCop,cmdSensor,cmdOutput,dataoutCPU,datainDataMem,datainCop,datainSensor,datainOutput,datainCPU,dataoutDataMem,dataoutCop,dataoutSensor,dataoutOutput : ns(32);
           reg ID_DataMem : ns(4);
           reg ID_Cop     : ns(4);
           reg ID_Sensor  : ns(4);
           reg ID_Output  : ns(4);
           
           $trace(DM_datain, "traces/DM_datain.seq");
           $trace(DM_datainrdy, "traces/DM_datainrdy.seq");
           $trace(DM_dataout, "traces/DM_dataout.seq");
           $trace(DM_cmdout, "traces/DM_cmdout.seq");
           $trace(DM_dataoutrdy, "traces/DM_dataoutrdy.seq");
           
           $trace(SS_datain, "traces/SS_datain.seq");
           $trace(SS_datainrdy, "traces/SS_datainrdy.seq");
           $trace(SS_dataout, "traces/SS_dataout.seq");
           $trace(SS_cmdout, "traces/SS_cmdout.seq");
           $trace(SS_dataoutrdy, "traces/SS_dataoutrdy.seq");
           
           $trace(OP_datain, "traces/OP_datain.seq");
           $trace(OP_datainrdy, "traces/OP_datainrdy.seq");
           $trace(OP_dataout, "traces/OP_dataout.seq");
           $trace(OP_cmdout, "traces/OP_cmdout.seq");
           $trace(OP_dataoutrdy, "traces/OP_dataoutrdy.seq");
           
           use bus(reqCPU,cmdCPU,dataoutCPU,ackCPU,dataRdyCPU,datainCPU,waitCPU, // master
                   reqDataMem,cmdDataMem,datainDataMem,ackDataMem,dataRdyDataMem,dataoutDataMem,waitDataMem, // Data memory (slave)
                   reqCop,cmdCop,datainCop,ackCop,dataRdyCop,dataoutCop,waitCop, // Coprocessor (slave)
                   reqSensor,cmdSensor,datainSensor,ackSensor,dataRdySensor,dataoutSensor,waitSensor,
                   reqOutput,cmdOutput,datainOutput,ackOutput,dataRdyOutput,dataoutOutput,waitOutput,// Sensor (slave)
                   ID_Sensor,ID_DataMem,ID_Output, ID_Cop); 
           
           use masterbusinterface(reqCPU,cmdCPU,dataoutCPU,ackCPU,dataRdyCPU,datainCPU,waitCPU, // Bus interface
                                  //CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy
                                  M_datain,M_cmd,M_datainrdy,M_dataout,M_dataoutrdy);

           use slavebusinterface(reqDataMem,cmdDataMem,datainDataMem,ackDataMem,dataRdyDataMem,dataoutDataMem,waitDataMem, // Bus interface (data memory)
                             //DMDatain,DMDatainrdy,DMDataout,DMCmdout,DMDataoutrdy,
                             DM_datain,DM_datainrdy,DM_dataout,DM_cmdout,DM_dataoutrdy,ID_DataMem,DM_stall);
                             
           use slavebusinterface2(reqSensor,cmdSensor,datainSensor,ackSensor,dataRdySensor,dataoutSensor,waitSensor, // Bus interface (Sensor)
                              //SensorDatain,SensorDatainrdy,NotUsed2,SensorCmdout,SensorDataoutrdy,
                              SS_datain,SS_datainrdy,SS_dataout,SS_cmdout,SS_dataoutrdy,ID_Sensor,SS_stall);
                              
           use slavebusinterface3(reqOutput,cmdOutput,datainOutput,ackOutput,dataRdyOutput,dataoutOutput,waitOutput, // Bus interface (data memory)
                              //OPDatain,OPDatainrdy,OPDataout,OPCmdout,OPDataoutrdy,
                              OP_datain,OP_datainrdy,OP_dataout,OP_cmdout,OP_dataoutrdy,ID_Output,OP_stall);

           use slavebusinterface4(reqCop,cmdCop,datainCop,ackCop,dataRdyCop,dataoutCop,waitCop, // Bus interface (data memory)
                             //DMDatain,DMDatainrdy,DMDataout,DMCmdout,DMDataoutrdy,
                             CP_datain,CP_datainrdy,CP_dataout,CP_cmdout,CP_dataoutrdy,ID_Cop,CP_stall);
           
           always{
              ID_Sensor = 0x1;
              ID_DataMem = 0x2;
              ID_Output = 0x3;
              ID_Cop = 0x4;
           }
}

////////////////////////////
// Auxiliary units
////////////////////////////
ipblock datamem(in address : ns(12);
          in wr,rd   : ns(1);
          in idata   : ns(32);
          out odata : ns(32)){

  iptype "ram";
  ipparm "size=4096";
  ipparm "wl=32";
  ipparm "file=datamemory.txt"; // initializes content. File syntax needs to be "addr data "* (the last space can also be a linebreak. NB! Should the students do a manual loading of the RAM to simulate a "real" system or is it ok if they just use this parameter?
  //ipparm "file=sddb48hex2.ecg"; 
}

dp DataMem(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.
   ){
   
   sig wr,rd : ns(1);
   sig address : ns(12);
   sig idata : ns(32);
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);
   
   use datamem(address,wr,rd,idata,dataout);
   
   $trace(address, "traces/DM_address.seq");
   $trace(wr, "traces/DM_wr.seq");
   $trace(rd, "traces/DM_rd.seq");
   $trace(idata, "traces/DM_idata.seq");
   
   always{
       //$display("DataMem input. datain: ", datain, ", cmd: ", cmd, ", datainrdy: ", datainrdy);
       stallr = stall;
       rd = cmdr[27] == 0;
       wr = cmdr[27] == 1;
       address = (cmdr[27] == 0) ? datainr : 0b00000 # cmdr[0:26]; // if Store Word instruction, use cmd[0:26] as address. If Load Word instruction use datain as address
       idata = (cmdr[27] == 0) ? 0 : datainr; // if store word use datain as data to be stored, if load word, just set idata to 0
       //$display($dec, "Cycle: ", $cycle);
   	   //$display($dec, "   address: ", address);
   }
   
   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }
   
}

fsm DataMem_cntrl(DataMem){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
       
}




// Cmd:
//    0: idle
//    1: run
//    2: reset
dp MWI( in cmd      : ns(28);
    in in_newValue  : ns(16); 
    in in_oldValue  : ns(16);
    out o_value   : ns(32)) {

  reg accu : ns(32);
  sig sum : ns(32);

  always {
    //$display($dec, "[", $cycle, "] MWI - cmd: ", cmd, ", newVal: ", in_newValue, ", oldVal: ", in_oldValue, ", sum: ", sum, ", o_value: ", o_value);

    accu = sum = (cmd == 1) ? 
              // Run
              accu + in_newValue - in_oldValue 
          :(cmd == 2) ?
              // reset accumulator
              0:
          // idle. Maintain accu value
          accu;

    // Return 0 on reset and idle. Else MWI value
    o_value = (cmd == 1) ? (sum * 4369) >> 17 : 0;
  }
}




dp Coprocessor(
      in datain     : ns(32);
      in cmd        : ns(32);
      in datainrdy  : ns(1);
      out dataout   : ns(32);
      out dataoutrdy: ns(1);
      in stall      : ns(1)){ // true if the slave is currently busy (with handshaking) and cannot receive new data.
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);

   sig mwiCmd : ns(2);
   sig newVal : ns(16);
   sig oldVal : ns(16);
   sig mwiOut : ns(32);

   
   use MWI(mwiCmd, newVal, oldVal, mwiOut);

   $trace(newVal, "traces/CP_newVal.seq");
   $trace(oldVal, "traces/CP_oldVal.seq");
   $trace(mwiOut, "traces/CP_mwiOut.seq");
   $trace(mwiCmd, "traces/CP_mwiCmd.seq");
   $trace(datainrdy, "traces/CP_datainrdy.seq");
   $trace(datain, "traces/CP_datain.seq");
   $trace(dataout, "traces/CP_dataout.seq");
   $trace(stall, "traces/CP_stall.seq");
   
   always{

      //$display("");
      //$display("");
      //$display($dec, "COP: datain: ", datain, ", cmd: ", cmd, ", datainrdy: ", datainrdy);
      //$display($dec, "COP: newVal: ", newVal, ", oldVal: ", oldVal, ", mwiCmd: ", mwiCmd, ", dataout: ", dataout, ", dataoutr: ", dataoutr);
      //$display($dec, "COP: dataout: ", dataout, ", dataoutrdy: ", dataoutrdy, ", stall: ", stall);
      //$display($bin, "cmd: ", cmd);

      newVal = datain[31:16];
      oldVal = datain[15:0];
      mwiCmd = cmd[1:0];

      stallr = stall;
      dataout = dataoutr;
    }

   sfg captureData{
      //$display("CaptureData. datainrdyr: ", datainrdyr, ", stallr: ", stallr, ", cmd: ", cmd);
      dataoutrdy = 0; 
      datainrdyr = datainrdy;
      datainr = datain;
      cmdr = cmd;
      dataoutr = (mwiOut) ? mwiOut : dataoutr;
   }
   
   sfg awaithandshake{
      //$display("awaithandshake");
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
      //$display("resetAndSignalRdy. dataoutr: ", dataoutr);
      dataoutrdy = 1;
      datainrdyr = 0;
   }
   
   sfg nothing{
      //$display("nothing");
      dataoutrdy = 0; 
   }
   
}

fsm Cop_cntrl(Coprocessor){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
       
}
   















ipblock sensordata(in address : ns(5);
          in wr,rd   : ns(1);
          in idata   : ns(32);
          out odata : ns(32)){

  iptype "ram";
  ipparm "size=32";
  ipparm "wl=32";
  ipparm "file=sddb48hex.ecg"; // initializes content
  
}

dp Sensor(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.
   ){
   
    sig address : ns(5);
    sig wr,rd : ns(1);
    sig idata,odata : ns(32);
    
    use sensordata(address,wr,rd,idata,odata);

   	reg c : ns(10);
   	reg reset : ns(1);
   	reg addr : ns(8);
   	reg LIMIT : ns(10); // How many cycles to wait before it "acquires" the next datapoint (simulated sampling rate)
   	reg stallr : ns(1);
   	reg datainrdyr : ns(1);
   	
   	$trace(odata, "traces/SS_data.seq");
   	$trace(c, "traces/SS_c.seq");
   	
   	always{

      wr = 0;
   		idata = 0;
   		LIMIT = 9; // 0 means 1 cycles => Pick new point each cycle TODO: Set proper sampling rate
   		address = addr;
   		
   		dataout = odata;
   		//dataoutrdy = 0;
   		stallr = stall;
   		//$display($dec, "Cycle: ", $cycle);
   		//$display($dec, "   data: ", odata);
   		//$display($dec, "   address: ", address);
   	}
   	
   sfg captureData{  
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       // Removed all datain and cmd capturing registers, due to the fact that the sensor only has one function, which is to send data once requested
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }

	sfg count{
    	c = c + 1;
    	rd = 0;
	}
   	
   	sfg addressUpdate{
   	   addr = addr + 1;
   	   rd = 1;
   	   c = 0;
   	}

}

fsm sensor_cntrl(Sensor){
   initial s0;
   state s1;
       
   @s0 if (datainrdyr == 1 & stallr == 0 & c == LIMIT) then (addressUpdate,resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 0 &  c != LIMIT) then (count,resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1 & c == LIMIT) then (addressUpdate,nothing) -> s1;
       else if (datainrdyr == 1 & stallr == 1 & c != LIMIT) then (count,nothing) -> s1;
       else if (datainrdyr == 0 & c == LIMIT) then (addressUpdate,captureData) -> s0;
       else (count,captureData) -> s0;
   @s1 if (stallr == 0 & c == LIMIT) then (addressUpdate,resetAndSignalRdy) -> s0;
       else if (stallr == 0 & c != LIMIT) then (count,resetAndSignalRdy) -> s0;
       else if (stallr == 1 & c == LIMIT) then (addressUpdate,awaithandshake) -> s1;
       else (count,awaithandshake) -> s1;
}

dp Output(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1); // true if the slave is currently busy (with handshaking) and cannot receive new data.
   out FilterOut : tc(32)
   ){
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);
   reg count : ns(10);
   reg FilterOut_r : tc(32);
   
   $trace(FilterOut, "traces/FilterOut.seq");
   $trace(count, "traces/out_count.seq");
   
   always{
       stallr = stall;
       dataout = 0x123;
   }
   
   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
       
       FilterOut = FilterOut_r;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
      
      FilterOut = FilterOut_r;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0;
       
       FilterOut = FilterOut_r;
   }
   
   sfg setFilterOut{
      FilterOut = datainr;
      FilterOut_r = datainr;
      count = count + 1;
   }
   
}

fsm Output_cntrl(Output){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy,setFilterOut) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy,setFilterOut) -> s0;
       else (awaithandshake) -> s1;
       
}

////////////////////////////
// System connections
////////////////////////////
system CPUsystem{

   CPU(CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy);
   
   bus_toplevel(CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy, // master unit
           DMDatain,DMDatainrdy,DMDataout,DMCmdout,DMDataoutrdy,DMStall, // slave (data memory)
           CPDatain,CPDatainrdy,CPDataout,CPCmdout,CPDataoutrdy,CPStall, // slave (data memory)
           SensorDatain,SensorDatainrdy,SensorDataout,SensorCmdout,SensorDataoutrdy,SensorStall,  // slave (sensor)
           OPDatain,OPDatainrdy,OPDataout,OPCmdout,OPDataoutrdy,OPStall); // slave (Output)
           
   DataMem(DMDataout,DMCmdout,DMDataoutrdy,DMDatain,DMDatainrdy,DMStall); // Data Memory Unit
   Sensor(SensorDataout,SensorCmdout,SensorDataoutrdy,SensorDatain,SensorDatainrdy,SensorStall);
   Output(OPDataout,OPCmdout,OPDataoutrdy,OPDatain,OPDatainrdy,OPStall,FilterOut);
   Coprocessor(CPDataout,CPCmdout,CPDataoutrdy,CPDatain,CPDatainrdy,CPStall); // Coprocessor
}
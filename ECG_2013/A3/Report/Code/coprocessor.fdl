// Cmd:
//    0: idle
//    1: run
//    2: reset
dp MWI( in cmd      : ns(28);
    in in_newValue  : ns(16); 
    in in_oldValue  : ns(16);
    out o_value   : ns(32)) {

  reg accu : ns(32);
  sig sum : ns(32);

  always {
    accu = sum = (cmd == 1) ? 
              // Run
              accu + in_newValue - in_oldValue 
          :(cmd == 2) ?
              // reset accumulator
              0:
          // idle. Maintain accu value
          accu;

    // Return 0 on reset and idle. Else MWI value
    o_value = (cmd == 1) ? (sum * 4369) >> 17 : 0;
  }
}




dp Coprocessor(
      in datain     : ns(32);
      in cmd        : ns(32);
      in datainrdy  : ns(1);
      out dataout   : ns(32);
      out dataoutrdy: ns(1);
      in stall      : ns(1)){
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);

   sig mwiCmd : ns(2);
   sig newVal : ns(16);
   sig oldVal : ns(16);
   sig mwiOut : ns(32);

   
   use MWI(mwiCmd, newVal, oldVal, mwiOut);

   $trace(newVal, "traces/CP_newVal.seq");
   $trace(oldVal, "traces/CP_oldVal.seq");
   $trace(mwiOut, "traces/CP_mwiOut.seq");
   $trace(mwiCmd, "traces/CP_mwiCmd.seq");
   $trace(datainrdy, "traces/CP_datainrdy.seq");
   $trace(datain, "traces/CP_datain.seq");
   $trace(dataout, "traces/CP_dataout.seq");
   $trace(stall, "traces/CP_stall.seq");
   
   always{

      newVal = datain[31:16];
      oldVal = datain[15:0];
      mwiCmd = cmd[1:0];

      stallr = stall;
      dataout = dataoutr;
    }

   sfg captureData{
      //$display("CaptureData. datainrdyr: ", datainrdyr, ", stallr: ", stallr, ", cmd: ", cmd);
      dataoutrdy = 0; 
      datainrdyr = datainrdy;
      datainr = datain;
      cmdr = cmd;
      dataoutr = (mwiOut) ? mwiOut : dataoutr;
   }
   
   sfg awaithandshake{
      //$display("awaithandshake");
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
      //$display("resetAndSignalRdy. dataoutr: ", dataoutr);
      dataoutrdy = 1;
      datainrdyr = 0;
   }
   
   sfg nothing{
      //$display("nothing");
      dataoutrdy = 0; 
   }
   
}

fsm Cop_cntrl(Coprocessor){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
       
}
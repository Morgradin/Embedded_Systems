dp ALU(in A, B:tc(32); in select:ns(2); out C:tc(32) ) {
	always {
		C = (select == 0b00) ? A-B: 
			(select == 0b01) ? B-A:
			(select == 0b10) ? A:
			B;
	}
}


dp testMuxer(out A, B:tc(32); out select:ns(2); in R:tc(32)) {
	always{$display($dec, "Cycle:", $cycle, ", A=", A , ", B=", B , ", Select=", select,
	", R=", R);}
	sfg test_0 { A=3; B=6; select=0; }
	sfg test_1 { A=23; B=17; select=1; }
	sfg test_2 { A=12; B=0; select=1; }
	sfg test_3 { A=12; B=3; select=3; }
	sfg test_4 { A=12; B=30; select=2; }
}


// state machine to control testbench
fsm f_testbench(testMuxer){
	initial s0; // begin with state s0
	state s1, s2, s3, s4; // other states are: s1, s2
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s3; // run test_2 and go to s0
	@s3 (test_3) -> s4; // run test_2 and go to s0
	@s4 (test_4) -> s0; // run test_2 and go to s0
}


system myFirstSystem {
	ALU(A, B, select, R);
	testMuxer(A, B, select, R);
}